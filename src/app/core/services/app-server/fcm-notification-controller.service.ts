/**
 * App Server
 * RADAR App Server Api Documentation
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse
} from '@angular/common/http'
import { Inject, Injectable, Optional } from '@angular/core'
import { Observable } from 'rxjs/Observable'

import {
  FcmNotificationDto,
  FcmNotifications,
  ResponseEntity
} from '../../../shared/models/models'
import { Configuration } from './configuration'
import { CustomHttpUrlEncodingCodec } from './encoder'
import { BASE_PATH, COLLECTION_FORMATS } from './variables'

@Injectable()
export class FcmNotificationControllerService {
  protected basePath = 'http://localhost:8080'
  public defaultHeaders = new HttpHeaders()
  public configuration = new Configuration()

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath
    }
    if (configuration) {
      this.configuration = configuration
      this.basePath = basePath || configuration.basePath || this.basePath
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data'
    for (const consume of consumes) {
      if (form === consume) {
        return true
      }
    }
    return false
  }

  /**
   * deleteNotificationsForUser
   *
   * @param projectId projectId
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteNotificationsForUserUsingDELETE(
    projectId: string,
    userId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ResponseEntity>
  public deleteNotificationsForUserUsingDELETE(
    projectId: string,
    userId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ResponseEntity>>
  public deleteNotificationsForUserUsingDELETE(
    projectId: string,
    userId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ResponseEntity>>
  public deleteNotificationsForUserUsingDELETE(
    projectId: string,
    userId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (projectId === null || projectId === undefined) {
      throw new Error(
        'Required parameter projectId was null or undefined when calling deleteNotificationsForUserUsingDELETE.'
      )
    }

    if (userId === null || userId === undefined) {
      throw new Error(
        'Required parameter userId was null or undefined when calling deleteNotificationsForUserUsingDELETE.'
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    return this.httpClient.delete<ResponseEntity>(
      `${this.basePath}/projects/${encodeURIComponent(
        String(projectId)
      )}/users/${encodeURIComponent(String(userId))}/messaging/notifications`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * getAllNotifications
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllNotificationsUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotifications>
  public getAllNotificationsUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotifications>>
  public getAllNotificationsUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotifications>>
  public getAllNotificationsUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    return this.httpClient.get<FcmNotifications>(
      `${this.basePath}/messaging/notifications`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * getFilteredNotifications
   *
   * @param delivered delivered
   * @param endTime endTime
   * @param startTime startTime
   * @param ttlSeconds ttlSeconds
   * @param type type
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFilteredNotificationsUsingGET(
    delivered?: boolean,
    endTime?: Date,
    startTime?: Date,
    ttlSeconds?: number,
    type?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotifications>
  public getFilteredNotificationsUsingGET(
    delivered?: boolean,
    endTime?: Date,
    startTime?: Date,
    ttlSeconds?: number,
    type?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotifications>>
  public getFilteredNotificationsUsingGET(
    delivered?: boolean,
    endTime?: Date,
    startTime?: Date,
    ttlSeconds?: number,
    type?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotifications>>
  public getFilteredNotificationsUsingGET(
    delivered?: boolean,
    endTime?: Date,
    startTime?: Date,
    ttlSeconds?: number,
    type?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    })
    if (delivered !== undefined && delivered !== null) {
      queryParameters = queryParameters.set('delivered', <any>delivered)
    }
    if (endTime !== undefined && endTime !== null) {
      queryParameters = queryParameters.set(
        'endTime',
        <any>endTime.toISOString()
      )
    }
    if (startTime !== undefined && startTime !== null) {
      queryParameters = queryParameters.set(
        'startTime',
        <any>startTime.toISOString()
      )
    }
    if (ttlSeconds !== undefined && ttlSeconds !== null) {
      queryParameters = queryParameters.set('ttlSeconds', <any>ttlSeconds)
    }
    if (type !== undefined && type !== null) {
      queryParameters = queryParameters.set('type', <any>type)
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    return this.httpClient.get<FcmNotifications>(
      `${this.basePath}/messaging/notifications/filtered`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * getNotificationUsingId
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getNotificationUsingIdUsingGET(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotificationDto>
  public getNotificationUsingIdUsingGET(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotificationDto>>
  public getNotificationUsingIdUsingGET(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotificationDto>>
  public getNotificationUsingIdUsingGET(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getNotificationUsingIdUsingGET.'
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    return this.httpClient.get<FcmNotificationDto>(
      `${this.basePath}/messaging/notifications/${encodeURIComponent(
        String(id)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * getNotificationsUsingProjectId
   *
   * @param projectId projectId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getNotificationsUsingProjectIdUsingGET(
    projectId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotifications>
  public getNotificationsUsingProjectIdUsingGET(
    projectId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotifications>>
  public getNotificationsUsingProjectIdUsingGET(
    projectId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotifications>>
  public getNotificationsUsingProjectIdUsingGET(
    projectId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (projectId === null || projectId === undefined) {
      throw new Error(
        'Required parameter projectId was null or undefined when calling getNotificationsUsingProjectIdUsingGET.'
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    return this.httpClient.get<FcmNotifications>(
      `${this.basePath}/projects/${encodeURIComponent(
        String(projectId)
      )}/messaging/notifications`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * getRadarNotificationsUsingSubjectId
   *
   * @param subjectId subjectId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getRadarNotificationsUsingSubjectIdUsingGET(
    subjectId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotifications>
  public getRadarNotificationsUsingSubjectIdUsingGET(
    subjectId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotifications>>
  public getRadarNotificationsUsingSubjectIdUsingGET(
    subjectId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotifications>>
  public getRadarNotificationsUsingSubjectIdUsingGET(
    subjectId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (subjectId === null || subjectId === undefined) {
      throw new Error(
        'Required parameter subjectId was null or undefined when calling getRadarNotificationsUsingSubjectIdUsingGET.'
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    return this.httpClient.get<FcmNotifications>(
      `${this.basePath}/users/${encodeURIComponent(
        String(subjectId)
      )}/messaging/notifications`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * getUsersUsingProjectIdAndSubjectId
   *
   * @param projectId projectId
   * @param subjectId subjectId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUsersUsingProjectIdAndSubjectIdUsingGET(
    projectId: string,
    subjectId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotifications>
  public getUsersUsingProjectIdAndSubjectIdUsingGET(
    projectId: string,
    subjectId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotifications>>
  public getUsersUsingProjectIdAndSubjectIdUsingGET(
    projectId: string,
    subjectId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotifications>>
  public getUsersUsingProjectIdAndSubjectIdUsingGET(
    projectId: string,
    subjectId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (projectId === null || projectId === undefined) {
      throw new Error(
        'Required parameter projectId was null or undefined when calling getUsersUsingProjectIdAndSubjectIdUsingGET.'
      )
    }

    if (subjectId === null || subjectId === undefined) {
      throw new Error(
        'Required parameter subjectId was null or undefined when calling getUsersUsingProjectIdAndSubjectIdUsingGET.'
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    return this.httpClient.get<FcmNotifications>(
      `${this.basePath}/projects/${encodeURIComponent(
        String(projectId)
      )}/ users/${encodeURIComponent(
        String(subjectId)
      )}/messaging/notifications`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * scheduleNotificationNow
   *
   * @param notification notification
   * @param projectId projectId
   * @param userId userId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public scheduleNotificationNowUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    userId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotificationDto>
  public scheduleNotificationNowUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    userId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotificationDto>>
  public scheduleNotificationNowUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    userId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotificationDto>>
  public scheduleNotificationNowUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    userId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (notification === null || notification === undefined) {
      throw new Error(
        'Required parameter notification was null or undefined when calling scheduleNotificationNowUsingPOST.'
      )
    }

    if (projectId === null || projectId === undefined) {
      throw new Error(
        'Required parameter projectId was null or undefined when calling scheduleNotificationNowUsingPOST.'
      )
    }

    if (userId === null || userId === undefined) {
      throw new Error(
        'Required parameter userId was null or undefined when calling scheduleNotificationNowUsingPOST.'
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<FcmNotificationDto>(
      `${this.basePath}/projects/${encodeURIComponent(
        String(projectId)
      )}/users/${encodeURIComponent(
        String(userId)
      )}/messaging/notifications/now`,
      notification,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }

  /**
   * scheduleSingleNotification
   *
   * @param notification notification
   * @param projectId projectId
   * @param subjectId subjectId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public scheduleSingleNotificationUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    subjectId: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<FcmNotificationDto>
  public scheduleSingleNotificationUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    subjectId: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<FcmNotificationDto>>
  public scheduleSingleNotificationUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    subjectId: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<FcmNotificationDto>>
  public scheduleSingleNotificationUsingPOST(
    notification: FcmNotificationDto,
    projectId: string,
    subjectId: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (notification === null || notification === undefined) {
      throw new Error(
        'Required parameter notification was null or undefined when calling scheduleSingleNotificationUsingPOST.'
      )
    }

    if (projectId === null || projectId === undefined) {
      throw new Error(
        'Required parameter projectId was null or undefined when calling scheduleSingleNotificationUsingPOST.'
      )
    }

    if (subjectId === null || subjectId === undefined) {
      throw new Error(
        'Required parameter subjectId was null or undefined when calling scheduleSingleNotificationUsingPOST.'
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<FcmNotificationDto>(
      `${this.basePath}/projects/${encodeURIComponent(
        String(projectId)
      )}/users/${encodeURIComponent(
        String(subjectId)
      )}/messaging/notifications`,
      notification,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    )
  }
}
